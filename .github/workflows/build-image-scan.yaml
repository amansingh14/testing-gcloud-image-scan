name: Scan Docker Image for Vulnerabilities TEST1

on:
  pull_request:
    branch:
      - master
    path:
      - 'services/test1/**'
      - '.github/workflows/build-image-scan.yaml'
    types: [opened, synchronize, reopened, ready_for_review]
  pull_request_review:
    types: [submitted]

jobs:
  changes:
    runs-on: ubuntu-latest
    outputs:
      test1: ${{ steps.filter.outputs.test1 }}
    steps:
      - uses: dorny/paths-filter@v3
        id: filter
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          filters: |
            test1:
              - 'services/test1/**'
              - '.github/workflows/build-image-scan.yaml'
  build:
    runs-on: ubuntu-latest
    needs: [changes]
    if: needs.changes.outputs.test1 == 'true' && github.event_name == 'pull_request'
    steps:
      - name: job a
        run: |
          echo "on Pull request hold for job B"
  scan:
    runs-on: ubuntu-latest
    needs: [ changes ]
    if: >
      github.event_name == 'pull_request_review' && github.event.review.state == 'approved'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - id: 'auth'
        name: 'Authenticate to Google Cloud'
        uses: 'google-github-actions/auth@v3'
        with:
          credentials_json: '${{ secrets.GCP_SA_KEY }}'
      - id: 'sdk'
        name: setup gcloud SDK
        uses: 'google-github-actions/setup-gcloud@v3'

      - name: Read image destination from config.yaml
        id: read-destination
        run: |
          DEST=$(grep -- '--destination=' config.yaml | sed 's/.*--destination="\{0,1\}\([^"]*\)"\{0,1\}.*/\1/')
          echo "üì¶ Destination found: $DEST"
          echo "DESTINATION=$DEST" >> $GITHUB_ENV

      - name: Scan image and show vulnerabilities
        id: scan
        run: |
          set -e
        
          IMAGE_URI="${DESTINATION}"
          echo "üîç Scanning image: $IMAGE_URI"

          # Get image digest
          DIGEST=$(gcloud container images describe "$IMAGE_URI" --format='value(image_summary.digest)')
          IMAGE_URI_WITH_DIGEST="$IMAGE_URI@${DIGEST}"
          echo "Resolved Image: $IMAGE_URI_WITH_DIGEST"

          # Run on-demand vulnerability scan
          SCAN_NAME=$(gcloud artifacts docker images scan "$IMAGE_URI_WITH_DIGEST" \
            --remote --location=asia --format='value(response.scan)' --quiet)

          echo "Waiting for scan results..."
          gcloud artifacts docker images list-vulnerabilities "$SCAN_NAME" \
            --format=json > vuln-report.json
        
          echo "============================"
          echo "üß™ Vulnerability Summary"
          echo "============================"

          TOTAL=$(jq length vuln-report.json)
          CRITICAL=$(jq '[.[] | select(.vulnerability.effectiveSeverity=="CRITICAL")] | length' vuln-report.json)
          HIGH=$(jq '[.[] | select(.vulnerability.effectiveSeverity=="HIGH")] | length' vuln-report.json)
          MEDIUM=$(jq '[.[] | select(.vulnerability.effectiveSeverity=="MEDIUM")] | length' vuln-report.json)
          LOW=$(jq '[.[] | select(.vulnerability.effectiveSeverity=="LOW")] | length' vuln-report.json)

          echo "Total: $TOTAL"
          echo "Critical: $CRITICAL"
          echo "High: $HIGH"
          echo "Medium: $MEDIUM"
          echo "Low: $LOW"

          echo ""
          echo "============================"
          echo "üìã Top Vulnerabilities"
          echo "============================"
           # jq -r 'limit(10; .[] | [.vulnerability.effectiveSeverity, .vulnerability.shortDescription, .packageIssue[0].affectedPackage] | @tsv)' vuln-report.json | \
           # header
          jq -r '
            # Handle both array and single-object JSONs
            (if type == "array" then . else [.] end)
            | .[]
            | (.vulnerability.effectiveSeverity // "-") as $sev
            | (.vulnerability.shortDescription // (.noteName | tostring | split("/") | last) // "-") as $id
            | (.vulnerability.packageIssue // [])[0] as $pi
            | [
                $sev,
                $id,
                ($pi.affectedPackage // "-"),
                ($pi.affectedVersion.fullName // "-"),
                ($pi.fixedVersion.fullName // "-"),
                ($pi.packageType // "-"),
                (((.vulnerability.relatedUrls // []) | map(.url) | first) // "-")
              ]
            | @tsv
          ' vuln-report.json |
          awk -F'\t' 'BEGIN {
            printf "%-8s | %-16s | %-28s | %-14s | %-14s | %-6s | %s\n",
            "SEV","CVE/ID","PACKAGE","AFFECTED","FIXED","TYPE","URL"
            printf "--------|------------------|------------------------------|----------------|----------------|--------|----------------------------------------\n"
          }
          { printf "%-8s | %-16s | %-28s | %-14s | %-14s | %-6s | %s\n",$1,$2,$3,$4,$5,$6,$7 }'

          echo "CRITICAL=$CRITICAL" >> $GITHUB_ENV
          echo "HIGH=$HIGH" >> $GITHUB_ENV
          echo "IMAGE_URI_WITH_DIGEST=$IMAGE_URI_WITH_DIGEST" >> $GITHUB_ENV

          if [[ "$CRITICAL" -gt 0 || "$HIGH" -gt 0 ]]; then
            echo "‚ùå Found high/critical vulnerabilities!"
            exit 1
          else
            echo "‚úÖ No high or critical vulnerabilities found."
          fi
